import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load the dataset
titanic_df = pd.read_csv('titanic.csv')

# Feature Engineering
sex_encoded = pd.get_dummies(titanic_df['Sex'], drop_first=True)
embarked_encoded = pd.get_dummies(titanic_df['Embarked'], drop_first=True)
titanic_df.drop(columns=['Name', 'Ticket', 'Cabin', 'Sex', 'Embarked', 'PassengerId'], inplace=True)
titanic_df = pd.concat([titanic_df, sex_encoded, embarked_encoded], axis=1)

# Handling Missing Values
def fill_age(age, pclass):
    if pd.isnull(age):
        if pclass == 1:
            return 38
        elif pclass == 2:
            return 30
        else:
            return 25
    else:
        return age

titanic_df['Age'] = titanic_df.apply(lambda x: fill_age(x['Age'], x['Pclass']), axis=1)

# Train Test Split
features = titanic_df.drop(columns=['Survived'])
target = titanic_df['Survived']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Standardization
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Logistic Regression
logistic_model = LogisticRegression()
logistic_model.fit(X_train_scaled, y_train)
y_pred_lr = logistic_model.predict(X_test_scaled)
lr_accuracy = accuracy_score(y_test, y_pred_lr)
print("Logistic Regression Accuracy Score:", lr_accuracy)

# Support Vector Machine
svm_model = SVC(kernel='linear', C=1)
svm_model.fit(X_train_scaled, y_train)
y_pred_svm = svm_model.predict(X_test_scaled)
svm_accuracy = accuracy_score(y_test, y_pred_svm)
print("SVM Accuracy Score:", svm_accuracy)

# Decision Tree Classifier
tree_model = DecisionTreeClassifier()
tree_model.fit(X_train_scaled, y_train)
y_pred_tree = tree_model.predict(X_test_scaled)
tree_accuracy = accuracy_score(y_test, y_pred_tree)
print("Decision Tree Accuracy Score:", tree_accuracy)
