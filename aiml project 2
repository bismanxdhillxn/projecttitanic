import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score


df_titanic = pd.read_csv('titanic.csv')


encoded_sex = pd.get_dummies(df_titanic['Sex'], drop_first=True)
encoded_embarked = pd.get_dummies(df_titanic['Embarked'], drop_first=True)
df_titanic.drop(columns=['Name', 'Ticket', 'Cabin', 'Sex', 'Embarked', 'PassengerId'], inplace=True)
df_titanic = pd.concat([df_titanic, encoded_sex, encoded_embarked], axis=1)


def fill_age(age, pclass):
    if pd.isnull(age):
        if pclass == 1:
            return 38
        elif pclass == 2:
            return 30
        else:
            return 25
    else:
        return age

df_titanic['Age'] = df_titanic.apply(lambda x: fill_age(x['Age'], x['Pclass']), axis=1)

X_data = df_titanic.drop(columns=['Survived'])
y_target = df_titanic['Survived']
X_train, X_test, y_train, y_test = train_test_split(X_data, y_target, test_size=0.2, random_state=42)


scaler_titanic = StandardScaler()
X_train_scaled = scaler_titanic.fit_transform(X_train)
X_test_scaled = scaler_titanic.transform(X_test)


log_model_titanic = LogisticRegression()
log_model_titanic.fit(X_train_scaled, y_train)
y_pred_log = log_model_titanic.predict(X_test_scaled)
accuracy_log = accuracy_score(y_test, y_pred_log)
print("Logistic Regression Accuracy Score:", accuracy_log)


svm_model_titanic = SVC(kernel='linear', C=1)
svm_model_titanic.fit(X_train_scaled, y_train)
y_pred_svm = svm_model_titanic.predict(X_test_scaled)
accuracy_svm = accuracy_score(y_test, y_pred_svm)
print("SVM Accuracy Score:", accuracy_svm)


tree_model_titanic = DecisionTreeClassifier()
tree_model_titanic.fit(X_train_scaled, y_train)
y_pred_tree = tree_model_titanic.predict(X_test_scaled)
accuracy_tree = accuracy_score(y_test, y_pred_tree)
print("Decision Tree Accuracy Score:", accuracy_tree)
